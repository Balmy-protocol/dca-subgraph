// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GlobalParameters extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GlobalParameters entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GlobalParameters entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GlobalParameters", id.toString(), this);
  }

  static load(id: string): GlobalParameters | null {
    return store.get("GlobalParameters", id) as GlobalParameters | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeRecipient(): Bytes | null {
    let value = this.get("feeRecipient");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeRecipient(value: Bytes | null) {
    if (value === null) {
      this.unset("feeRecipient");
    } else {
      this.set("feeRecipient", Value.fromBytes(value as Bytes));
    }
  }

  get nftDescriptor(): Bytes | null {
    let value = this.get("nftDescriptor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nftDescriptor(value: Bytes | null) {
    if (value === null) {
      this.unset("nftDescriptor");
    } else {
      this.set("nftDescriptor", Value.fromBytes(value as Bytes));
    }
  }

  get swapFee(): BigInt | null {
    let value = this.get("swapFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapFee(value: BigInt | null) {
    if (value === null) {
      this.unset("swapFee");
    } else {
      this.set("swapFee", Value.fromBigInt(value as BigInt));
    }
  }

  get loanFee(): BigInt | null {
    let value = this.get("loanFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanFee(value: BigInt | null) {
    if (value === null) {
      this.unset("loanFee");
    } else {
      this.set("loanFee", Value.fromBigInt(value as BigInt));
    }
  }

  get FEE_PRECISION(): i32 {
    let value = this.get("FEE_PRECISION");
    return value.toI32();
  }

  set FEE_PRECISION(value: i32) {
    this.set("FEE_PRECISION", Value.fromI32(value));
  }

  get MAX_FEE(): BigInt | null {
    let value = this.get("MAX_FEE");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set MAX_FEE(value: BigInt | null) {
    if (value === null) {
      this.unset("MAX_FEE");
    } else {
      this.set("MAX_FEE", Value.fromBigInt(value as BigInt));
    }
  }
}

export class SwapInterval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SwapInterval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SwapInterval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SwapInterval", id.toString(), this);
  }

  static load(id: string): SwapInterval | null {
    return store.get("SwapInterval", id) as SwapInterval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get interval(): BigInt {
    let value = this.get("interval");
    return value.toBigInt();
  }

  set interval(value: BigInt) {
    this.set("interval", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get highestId(): BigInt {
    let value = this.get("highestId");
    return value.toBigInt();
  }

  set highestId(value: BigInt) {
    this.set("highestId", Value.fromBigInt(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get swapsIntervals(): Array<string> {
    let value = this.get("swapsIntervals");
    return value.toStringArray();
  }

  set swapsIntervals(value: Array<string>) {
    this.set("swapsIntervals", Value.fromStringArray(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get swapInterval(): string {
    let value = this.get("swapInterval");
    return value.toString();
  }

  set swapInterval(value: string) {
    this.set("swapInterval", Value.fromString(value));
  }

  get current(): string {
    let value = this.get("current");
    return value.toString();
  }

  set current(value: string) {
    this.set("current", Value.fromString(value));
  }

  get history(): Array<string> {
    let value = this.get("history");
    return value.toStringArray();
  }

  set history(value: Array<string>) {
    this.set("history", Value.fromStringArray(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get terminatedAtBlock(): BigInt | null {
    let value = this.get("terminatedAtBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set terminatedAtBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("terminatedAtBlock");
    } else {
      this.set("terminatedAtBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get terminatedAtTimestamp(): BigInt | null {
    let value = this.get("terminatedAtTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set terminatedAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("terminatedAtTimestamp");
    } else {
      this.set("terminatedAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class PositionState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PositionState entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PositionState entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PositionState", id.toString(), this);
  }

  static load(id: string): PositionState | null {
    return store.get("PositionState", id) as PositionState | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get startingSwap(): BigInt {
    let value = this.get("startingSwap");
    return value.toBigInt();
  }

  set startingSwap(value: BigInt) {
    this.set("startingSwap", Value.fromBigInt(value));
  }

  get lastSwap(): BigInt {
    let value = this.get("lastSwap");
    return value.toBigInt();
  }

  set lastSwap(value: BigInt) {
    this.set("lastSwap", Value.fromBigInt(value));
  }

  get remainingSwaps(): BigInt {
    let value = this.get("remainingSwaps");
    return value.toBigInt();
  }

  set remainingSwaps(value: BigInt) {
    this.set("remainingSwaps", Value.fromBigInt(value));
  }

  get swapped(): BigInt {
    let value = this.get("swapped");
    return value.toBigInt();
  }

  set swapped(value: BigInt) {
    this.set("swapped", Value.fromBigInt(value));
  }

  get withdrawn(): BigInt {
    let value = this.get("withdrawn");
    return value.toBigInt();
  }

  set withdrawn(value: BigInt) {
    this.set("withdrawn", Value.fromBigInt(value));
  }

  get remainingLiquidity(): BigInt {
    let value = this.get("remainingLiquidity");
    return value.toBigInt();
  }

  set remainingLiquidity(value: BigInt) {
    this.set("remainingLiquidity", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }
}

export class PositionPairSwap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PositionPairSwap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PositionPairSwap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PositionPairSwap", id.toString(), this);
  }

  static load(id: string): PositionPairSwap | null {
    return store.get("PositionPairSwap", id) as PositionPairSwap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get pairSwap(): string {
    let value = this.get("pairSwap");
    return value.toString();
  }

  set pairSwap(value: string) {
    this.set("pairSwap", Value.fromString(value));
  }

  get used(): BigInt {
    let value = this.get("used");
    return value.toBigInt();
  }

  set used(value: BigInt) {
    this.set("used", Value.fromBigInt(value));
  }

  get swapped(): BigInt {
    let value = this.get("swapped");
    return value.toBigInt();
  }

  set swapped(value: BigInt) {
    this.set("swapped", Value.fromBigInt(value));
  }
}

export class PairSwap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairSwap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairSwap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairSwap", id.toString(), this);
  }

  static load(id: string): PairSwap | null {
    return store.get("PairSwap", id) as PairSwap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get swapper(): Bytes {
    let value = this.get("swapper");
    return value.toBytes();
  }

  set swapper(value: Bytes) {
    this.set("swapper", Value.fromBytes(value));
  }

  get swapCalle(): Bytes | null {
    let value = this.get("swapCalle");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set swapCalle(value: Bytes | null) {
    if (value === null) {
      this.unset("swapCalle");
    } else {
      this.set("swapCalle", Value.fromBytes(value as Bytes));
    }
  }

  get borrowedTokenA(): BigInt {
    let value = this.get("borrowedTokenA");
    return value.toBigInt();
  }

  set borrowedTokenA(value: BigInt) {
    this.set("borrowedTokenA", Value.fromBigInt(value));
  }

  get borrowedTokenB(): BigInt {
    let value = this.get("borrowedTokenB");
    return value.toBigInt();
  }

  set borrowedTokenB(value: BigInt) {
    this.set("borrowedTokenB", Value.fromBigInt(value));
  }

  get pairSwapsIntervals(): Array<string> {
    let value = this.get("pairSwapsIntervals");
    return value.toStringArray();
  }

  set pairSwapsIntervals(value: Array<string>) {
    this.set("pairSwapsIntervals", Value.fromStringArray(value));
  }

  get availableToBorrowTokenA(): BigInt {
    let value = this.get("availableToBorrowTokenA");
    return value.toBigInt();
  }

  set availableToBorrowTokenA(value: BigInt) {
    this.set("availableToBorrowTokenA", Value.fromBigInt(value));
  }

  get availableToBorrowTokenB(): BigInt {
    let value = this.get("availableToBorrowTokenB");
    return value.toBigInt();
  }

  set availableToBorrowTokenB(value: BigInt) {
    this.set("availableToBorrowTokenB", Value.fromBigInt(value));
  }

  get ratePerUnitBToA(): BigInt {
    let value = this.get("ratePerUnitBToA");
    return value.toBigInt();
  }

  set ratePerUnitBToA(value: BigInt) {
    this.set("ratePerUnitBToA", Value.fromBigInt(value));
  }

  get ratePerUnitAToB(): BigInt {
    let value = this.get("ratePerUnitAToB");
    return value.toBigInt();
  }

  set ratePerUnitAToB(value: BigInt) {
    this.set("ratePerUnitAToB", Value.fromBigInt(value));
  }

  get platformFeeTokenA(): BigInt {
    let value = this.get("platformFeeTokenA");
    return value.toBigInt();
  }

  set platformFeeTokenA(value: BigInt) {
    this.set("platformFeeTokenA", Value.fromBigInt(value));
  }

  get platformFeeTokenB(): BigInt {
    let value = this.get("platformFeeTokenB");
    return value.toBigInt();
  }

  set platformFeeTokenB(value: BigInt) {
    this.set("platformFeeTokenB", Value.fromBigInt(value));
  }

  get amountToBeProvidedBySwapper(): BigInt {
    let value = this.get("amountToBeProvidedBySwapper");
    return value.toBigInt();
  }

  set amountToBeProvidedBySwapper(value: BigInt) {
    this.set("amountToBeProvidedBySwapper", Value.fromBigInt(value));
  }

  get amountToRewardSwapperWith(): BigInt {
    let value = this.get("amountToRewardSwapperWith");
    return value.toBigInt();
  }

  set amountToRewardSwapperWith(value: BigInt) {
    this.set("amountToRewardSwapperWith", Value.fromBigInt(value));
  }

  get tokenToBeProvidedBySwapper(): string {
    let value = this.get("tokenToBeProvidedBySwapper");
    return value.toString();
  }

  set tokenToBeProvidedBySwapper(value: string) {
    this.set("tokenToBeProvidedBySwapper", Value.fromString(value));
  }

  get tokenToRewardSwapperWith(): string {
    let value = this.get("tokenToRewardSwapperWith");
    return value.toString();
  }

  set tokenToRewardSwapperWith(value: string) {
    this.set("tokenToRewardSwapperWith", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get executedAtBlock(): BigInt {
    let value = this.get("executedAtBlock");
    return value.toBigInt();
  }

  set executedAtBlock(value: BigInt) {
    this.set("executedAtBlock", Value.fromBigInt(value));
  }

  get executedAtTimestamp(): BigInt {
    let value = this.get("executedAtTimestamp");
    return value.toBigInt();
  }

  set executedAtTimestamp(value: BigInt) {
    this.set("executedAtTimestamp", Value.fromBigInt(value));
  }
}

export class PairSwapInterval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairSwapInterval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairSwapInterval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairSwapInterval", id.toString(), this);
  }

  static load(id: string): PairSwapInterval | null {
    return store.get("PairSwapInterval", id) as PairSwapInterval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get pairSwap(): string {
    let value = this.get("pairSwap");
    return value.toString();
  }

  set pairSwap(value: string) {
    this.set("pairSwap", Value.fromString(value));
  }

  get swapInterval(): string {
    let value = this.get("swapInterval");
    return value.toString();
  }

  set swapInterval(value: string) {
    this.set("swapInterval", Value.fromString(value));
  }

  get swapPerformed(): BigInt {
    let value = this.get("swapPerformed");
    return value.toBigInt();
  }

  set swapPerformed(value: BigInt) {
    this.set("swapPerformed", Value.fromBigInt(value));
  }

  get amountToSwapTokenA(): BigInt {
    let value = this.get("amountToSwapTokenA");
    return value.toBigInt();
  }

  set amountToSwapTokenA(value: BigInt) {
    this.set("amountToSwapTokenA", Value.fromBigInt(value));
  }

  get amountToSwapTokenB(): BigInt {
    let value = this.get("amountToSwapTokenB");
    return value.toBigInt();
  }

  set amountToSwapTokenB(value: BigInt) {
    this.set("amountToSwapTokenB", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasSent(): BigInt {
    let value = this.get("gasSent");
    return value.toBigInt();
  }

  set gasSent(value: BigInt) {
    this.set("gasSent", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }
}
