type SwapInterval @entity {
  "interval"
  id: ID!
  "interval"
  interval: BigInt!
  "active interval"
  active: Boolean!
}

type Pair @entity {
  "address"
  id: ID!
  "tokenA"
  tokenA: Token!
  "tokenB"
  tokenB: Token!
  "positions ids"
  activePositionIds: [String!]!
  "active positions per interval: 0 index => 0 interval => amount of active positions"
  activePositionsPerInterval: [BigInt!]!
  "positions"
  positions: [Position!]! @derivedFrom(field: "pair")
  "last swapped executed at"
  lastSwappedAt: [BigInt!]!
  "swaps"
  swaps: [PairSwap!]! @derivedFrom(field: "pair")
  "swaps intervals"
  swapsIntervals: [PairSwapInterval!]! @derivedFrom(field: "pair")
  "created at transaction"
  transaction: Transaction!
  "created at block"
  createdAtBlock: BigInt!
  "created at timestamp"
  createdAtTimestamp: BigInt!
}

enum POSITION_STATUS {
  ACTIVE
  TERMINATED
  COMPLETED
}

type Position @entity {
  "pair.id-position.id"
  id: ID!
  
  "user"
  user: Bytes!
  "from"
  from: Token!
  "to"
  to: Token!
  "pair"
  pair: Pair!
  "swap interval"
  swapInterval: SwapInterval!

  "permissions"
  permissions: [PositionPermission!]!
  "position status"
  status: POSITION_STATUS!

  "Distributed share value (optional, only if type is a yield-bearing-share)"
  chamoUnderlying: BigInt

  "total deposited expressed in (from)"
  totalDeposited: BigInt!
  "total withdrawno expressed in (to)"
  totalWithdrawn: BigInt!
  "total swapped expressed in (to)"
  totalSwapped: BigInt!
  "total swaps"
  totalSwaps: BigInt!
  "times it was swapped"
  totalExecutedSwaps: BigInt!

  "state"
  current: PositionState!
  "actions"
  history: [PositionActionInterface!]! @derivedFrom(field: "position")
  
  "transaction"
  transaction: Transaction!
  "created at block"
  createdAtBlock: BigInt!
  "created at timestamp"
  createdAtTimestamp: BigInt!
  "terminated at block"
  terminatedAtBlock: BigInt
  "terminated at timestamp"
  terminatedAtTimestamp: BigInt
}

type PositionState @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!

  "rate"
  rate: BigInt!

  "remaining swaps"
  remainingSwaps: BigInt!
  "to be withdrawn (swapped not withrawn. previously named as idleSwapped. expressed in TO token)"
  toWithdraw: BigInt!
  "withdrawn (expressed in TO token)"
  withdrawn: BigInt!
  "remaining liquidity (expressed in FROM token)"
  remainingLiquidity: BigInt!

  # Mimic on-chain swapped amounts
  "swapped before modified"
  swappedBeforeModified: BigInt!
  "ratio accumulator. refers to on-chain rate accumulator"
  ratioAccumulator: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

enum PERMISSION {
  INCREASE,
  REDUCE,
  WITHDRAW,
  TERMINATE
}

type PositionPermission @entity {
  "position.id-operator.address"
  id: ID!
  "operator"
  operator: Bytes!
  "permissions"
  permissions: [PERMISSION!]!
}

type PairSwap @entity {
  "pair.address-transaction.hash"
  id: ID!
  "pair"
  pair: Pair!
  "swapper"
  swapper: Bytes!
  "pair swap intervals"
  pairSwapsIntervals: [PairSwapInterval!]! @derivedFrom(field: "pairSwap")
  "ratio unit b to a"
  ratioPerUnitBToA: BigInt!
  "ratio unit b to a with fee subtracted"
  ratioPerUnitBToAWithFee: BigInt!
  "ratio unit a to b"
  ratioPerUnitAToB: BigInt!
  "ratio unit a to b with fee subtracted"
  ratioPerUnitAToBWithFee: BigInt!
  "executed with transaction"
  transaction: Transaction!
  "executed at block number"
  executedAtBlock: BigInt!
  "executed at timestamp"
  executedAtTimestamp: BigInt!
}

type PairSwapInterval @entity {
  "pairSwap.id-swapInterval.interval"
  id: ID!
  "pair"
  pair: Pair!
  "pair swap"
  pairSwap: PairSwap!
  "swap interval"
  swapInterval: SwapInterval!
}

enum ACTION {
  PERMISSIONS_MODIFIED # done
  MODIFIED_RATE # done
  MODIFIED_DURATION # done
  MODIFIED_RATE_AND_DURATION # done
  WITHDREW # done
  SWAPPED # done
  TRANSFERED # done
  CREATED # done
  TERMINATED
}

interface PositionActionInterface {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type PermissionsModifiedAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "new permissions set"
  permissions: [PositionPermission!]!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type ModifiedRateAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "rate"
  rate: BigInt!
  "previous rate"
  oldRate: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type ModifiedDurationAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "remaining swaps"
  remainingSwaps: BigInt!
  "previous remaining swaps"
  oldRemainingSwaps: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type ModifiedRateAndDurationAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "rate"
  rate: BigInt!
  "previous rate"
  oldRate: BigInt!
  "remaining swaps"
  remainingSwaps: BigInt!
  "previous remaining swaps"
  oldRemainingSwaps: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type WithdrewAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "withdrawn (expressed in TO token)"
  withdrawn: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type SwappedAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "swapped (expressed in to)"
  swapped: BigInt
  "swapped underlying (if its a yield bearing share's position)"
  swappedUnderlying: BigInt
  "rate (expressed in from)"
  rate: BigInt

  "ratio unit b to a with fee subtracted"
  ratioPerUnitBToAWithFee: BigInt
  "ratio unit a to b with fee subtracted"
  ratioPerUnitAToBWithFee: BigInt

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type TransferedAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "who transfers"
  from: Bytes!
  "to whom it transfers"
  to: Bytes!

  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type CreatedAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!

  "rate"
  rate: BigInt!
  "remaining swaps"
  remainingSwaps: BigInt!
  "permissions set"
  permissions: [PositionPermission!]!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type TerminatedAction implements PositionActionInterface @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type Transaction @entity {
  "transaction.hash-transaction.index"
  id: ID!
  "The event name / call stacktrace"
  event: String!
  "The transaction sender"
  from: Bytes!
  "Transaction hash"
  hash: Bytes!
  "The transaction index"
  index: BigInt!
  "Address that received the transaction"
  to: Bytes!
  "Ether value sent in the transaction"
  value: BigInt!
  "Timestamp when the transaction was executed"
  timestamp: BigInt!
  "Block number"
  blockNumber: BigInt!
}

enum TOKEN_TYPE {
  BASE
  WRAPPED_PROTOCOL_TOKEN
  YIELD_BEARING_SHARE
}

type Token @entity {
  "Token address"
  id: ID!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
  "Allowed"
  allowed: Boolean!
  "Decimals"
  decimals: Int!
  "Magnitude"
  magnitude: BigInt!
  "Type of token"
  type: TOKEN_TYPE!
  "Underlying tokens"
  underlyingTokens: [Token!]
}

