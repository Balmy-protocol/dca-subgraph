type SwapInterval @entity {
  "interval"
  id: ID!
  "interval"
  interval: BigInt!
  "active interval"
  active: Boolean!
}

type Pair @entity {
  "address"
  id: ID!
  "tokenA"
  tokenA: Token!
  "tokenB"
  tokenB: Token!
  "positions ids"
  activePositionIds: [String!]!
  "active positions per interval: 0 index => 0 interval => amount of active positions"
  activePositionsPerInterval: [BigInt!]!
  "positions"
  positions: [Position!]! @derivedFrom(field: "pair")
  "when is pair going to be available to swap"
  nextSwapAvailableAt: BigInt!
  "swaps"
  swaps: [PairSwap!]! @derivedFrom(field: "pair")
  "swaps intervals"
  swapsIntervals: [PairSwapInterval!]! @derivedFrom(field: "pair")
  "created at transaction"
  transaction: Transaction!
  "created at block"
  createdAtBlock: BigInt!
  "created at timestamp"
  createdAtTimestamp: BigInt!
}

enum POSITION_STATUS {
  ACTIVE
  TERMINATED
}

type Position @entity {
  "pair.id-position.id"
  id: ID!
  "user"
  user: Bytes!
  "from"
  from: Token!
  "to"
  to: Token!
  "pair"
  pair: Pair!
  "swap interval"
  swapInterval: SwapInterval!
  "started at swap"
  startedAtSwap: BigInt!
  "total deposits"
  totalDeposits: BigInt!
  "total withdrawno expressed in (to)"
  totalWithdrawn: BigInt!
  "total swapped expressed in (to)"
  totalSwapped: BigInt!
  "total swaps"
  totalSwaps: BigInt!
  "state"
  current: PositionState!
  "past states"
  history: [PositionState!]! @derivedFrom(field: "position")
  "actions"
  actionsHistory: [PositionAction!]! @derivedFrom(field: "position")
  "position status"
  status: POSITION_STATUS!
  "transaction"
  transaction: Transaction!
  "created at block"
  createdAtBlock: BigInt!
  "created at timestamp"
  createdAtTimestamp: BigInt!
  "terminated at block"
  terminatedAtBlock: BigInt
  "terminated at timestamp"
  terminatedAtTimestamp: BigInt
}

type PositionState @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "rate"
  rate: BigInt!
  "starting swap"
  startingSwap: BigInt!
  "last swap"
  lastSwap: BigInt!

  "remaining swaps"
  remainingSwaps: BigInt!
  "total swapped from -> to (expressed in TO token)"
  swapped: BigInt!
  "to be withdrawn (swapped, not withrawn, expressed in TO token)"
  idleSwapped: BigInt!
  "withdrawn (expressed in TO token)"
  withdrawn: BigInt!
  "remaining liquidity (expressed in FROM token)"
  remainingLiquidity: BigInt!

  # Mimic on-chain swapped amounts
  "swapped before modified"
  swappedBeforeModified: BigInt!
  "rates accumulator"
  rateAccumulator: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

enum ACTION {
  MODIFIED_RATE
  MODIFIED_DURATION
  MODIFIED_RATE_AND_DURATION
  WITHDREW
  SWAPPED
  CREATED
}

type PositionAction @entity {
  "position.id-tx.hash-tx.index"
  id: ID!
  "position"
  position: Position!
  "action that caused the modification"
  action: ACTION!
  "actor who executed the action"
  actor: Bytes

  "rate"
  rate: BigInt
  "previous rate"
  oldRate: BigInt
  "remaining swaps"
  remainingSwaps: BigInt
  "previous remaining swaps"
  oldRemainingSwaps: BigInt

  "swapped (is this necesarry? swapped = rate, always)"
  swapped: BigInt
  "withdrawn (expressed in TO token)"
  withdrawn: BigInt

  "rate per unit b to a with fee subtracted"
  ratePerUnitBToAWithFee: BigInt!
  "rate per unit a to b with fee subtracted"
  ratePerUnitAToBWithFee: BigInt!

  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type PairSwap @entity {
  "pair.address-transaction.hash"
  id: ID!
  "pair"
  pair: Pair!
  "swapper"
  swapper: Bytes!
  # "swap callee"
  # swapCalle: Bytes
  "pair swap intervals"
  pairSwapsIntervals: [PairSwapInterval!]! @derivedFrom(field: "pairSwap")
  "rate per unit b to a"
  ratePerUnitBToA: BigInt!
  "rate per unit b to a with fee subtracted"
  ratePerUnitBToAWithFee: BigInt!
  "rate per unit a to b"
  ratePerUnitAToB: BigInt!
  "rate per unit a to b with fee subtracted"
  ratePerUnitAToBWithFee: BigInt!
  # "fee from token a"
  # platformFeeTokenA: BigInt!
  # "fee from token b"
  # platformFeeTokenB: BigInt!
  # "amount to be provided by swapper"
  # amountToBeProvidedBySwapper: BigInt!
  # "amount to reward swapper"
  # amountToRewardSwapperWith: BigInt!
  # "token to be provided by swapper"
  # tokenToBeProvidedBySwapper: Token!
  # "token to reward swapper with"
  # tokenToRewardSwapperWith: Token!
  "executed with transaction"
  transaction: Transaction!
  "executed at block number"
  executedAtBlock: BigInt!
  "executed at timestamp"
  executedAtTimestamp: BigInt!
}

type PairSwapInterval @entity {
  "pairSwap.id-swapInterval.interval"
  id: ID!
  "pair"
  pair: Pair!
  "pair swap"
  pairSwap: PairSwap!
  "swap interval"
  swapInterval: SwapInterval!
  "swap performed"
  swapPerformed: BigInt!
  # "amount to swap token a"
  # amountToSwapTokenA: BigInt!
  # "amount to swap token b"
  # amountToSwapTokenB: BigInt!
}

type Transaction @entity {
  "transaction.hash-transaction.index"
  id: ID!
  "The event name / call stacktrace"
  event: String!
  "The transaction sender"
  from: Bytes!
  # "Gas price used in the transaction"
  # gasPrice: BigInt!
  # "Gas sent used in the transaction"
  # gasSent: BigInt!
  "Transaction hash"
  hash: Bytes!
  "The transaction index"
  index: BigInt!
  "Address that received the transaction"
  to: Bytes!
  "Ether value sent in the transaction"
  value: BigInt!
  "Timestamp when the transaction was executed"
  timestamp: BigInt!
  # "Gas limit used in the transaction"
  # gasLimit: BigInt!
  "Block number"
  blockNumber: BigInt!
}

type Token @entity {
  "Token address"
  id: ID!
  "Number of decimals for this Token"
  decimals: Int!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
}
